import logging
import sqlite3
import random
import time
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7624971330:AAF5ubAHuOQ532clkZW8oBfjpF8e_Yq-IFc')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FARM_COOLDOWN = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MIN_STARS = 1
MAX_STARS = 2

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: int) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id, user_id)
        return chat_member.status in ['administrator', 'creator']
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def reset_all_stats(chat_id: int):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    cursor.execute('DELETE FROM users WHERE chat_id = ?', (chat_id,))
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER,
        chat_id INTEGER,
        username TEXT,
        first_name TEXT,
        stars INTEGER DEFAULT 0,
        multiplier REAL DEFAULT 1.0,
        level INTEGER DEFAULT 1,
        last_farm_time INTEGER DEFAULT 0,
        PRIMARY KEY (user_id, chat_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user(user_id, chat_id, username, first_name):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    user = cursor.fetchone()
    
    if not user:
        cursor.execute('''
        INSERT INTO users (user_id, chat_id, username, first_name)
        VALUES (?, ?, ?, ?)
        ''', (user_id, chat_id, username, first_name))
        conn.commit()
        user = (user_id, chat_id, username, first_name, 0, 1.0, 1, 0)
    
    conn.close()
    return user

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user(user_id, chat_id, **kwargs):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
    values = list(kwargs.values()) + [user_id, chat_id]
    
    cursor.execute(f'UPDATE users SET {set_clause} WHERE user_id = ? AND chat_id = ?', values)
    conn.commit()
    conn.close()

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏—è
def get_upgrade_cost(level):
    return level * 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ñ–∞—Ä–º–∞
def can_farm(last_farm_time):
    current_time = time.time()
    return current_time - last_farm_time >= FARM_COOLDOWN

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
def get_remaining_time(last_farm_time):
    current_time = time.time()
    elapsed = current_time - last_farm_time
    remaining = max(0, FARM_COOLDOWN - elapsed)
    hours = int(remaining // 3600)
    minutes = int((remaining % 3600) // 60)
    seconds = int(remaining % 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    get_user(user.id, chat.id, user.username, user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üåü –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="toplist")],
        [InlineKeyboardButton("üåæ –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"farm_{user.id}")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if await is_admin(context, user.id, chat.id):
        keyboard.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (Admin)", callback_data="admin_reset")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–≤–µ–∑–¥!\n\n"
        "–ö–∞–∂–¥—ã–π —á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç 1 –¥–æ 2 –∑–≤–µ–∑–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /farm.\n"
        "–ù–∞–∫–æ–ø–∏ –∑–≤–µ–∑–¥—ã –∏ —É–ª—É—á—à–∞–π —Å–≤–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(context, user.id, chat.id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_reset_{chat.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –û–±–Ω—É–ª–∏—Ç –≤—Å–µ –∑–≤—ë–∑–¥—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /farm
async def farm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    last_farm_time = user_data[7]
    
    if not can_farm(last_farm_time):
        remaining = get_remaining_time(last_farm_time)
        await update.message.reply_text(
            f"‚è∞ –í—ã —É–∂–µ —Ñ–∞—Ä–º–∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining}"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—ë–∑–¥—ã (1-2)
    base_stars = random.randint(MIN_STARS, MAX_STARS)
    multiplier = user_data[5]
    actual_stars = int(base_stars * multiplier)
    new_stars = user_data[4] + actual_stars
    current_time = time.time()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user(user.id, chat.id, stars=new_stars, last_farm_time=current_time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üåü {user.first_name} –ø–æ–ª—É—á–∏–ª {actual_stars} –∑–≤—ë–∑–¥!\n"
        f"üìä –ë–∞–∑–∞: {base_stars} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
        f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_stars} –∑–≤—ë–∑–¥"
    )
    
    keyboard = [
        [InlineKeyboardButton("üåü –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="toplist")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    stars = user_data[4]
    multiplier = user_data[5]
    level = user_data[6]
    last_farm_time = user_data[7]
    upgrade_cost = get_upgrade_cost(level)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞
    if can_farm(last_farm_time):
        farm_status = "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ñ–∞—Ä–º—É!"
    else:
        remaining = get_remaining_time(last_farm_time)
        farm_status = f"‚è∞ –î–æ —Ñ–∞—Ä–º–∞: {remaining}"
    
    keyboard = [
        [InlineKeyboardButton("üåæ –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"farm_{user.id}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="toplist")]
    ]
    
    if stars >= upgrade_cost:
        keyboard.insert(1, [InlineKeyboardButton(f"‚ö°Ô∏è –£–ª—É—á—à–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å ({upgrade_cost} –∑–≤—ë–∑–¥)", callback_data=f"upgrade_{user.id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üåü –ü—Ä–æ—Ñ–∏–ª—å {user.first_name}\n\n"
        f"‚ú® –ó–≤—ë–∑–¥—ã: {stars}\n"
        f"‚ö°Ô∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üíé –°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {upgrade_cost} –∑–≤—ë–∑–¥\n"
        f"‚è∞ {farm_status}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    stars = user_data[4]
    
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {stars} –∑–≤—ë–∑–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /toplist
async def toplist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    
    if chat.type == 'private':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
        return
    
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT username, first_name, stars, level 
    FROM users 
    WHERE chat_id = ? 
    ORDER BY stars DESC 
    LIMIT 10
    ''', (chat.id,))
    
    top_users = cursor.fetchall()
    conn.close()
    
    if not top_users:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â—ë –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!")
        return
    
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (username, first_name, stars, level) in enumerate(top_users, 1):
        display_name = f"@{username}" if username else first_name
        top_text += f"{i}. {display_name} - {stars} –∑–≤—ë–∑–¥ (–£—Ä. {level})\n"
    
    keyboard = [
        [InlineKeyboardButton("üåü –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üåæ –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"farm_{user.id}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ø", callback_data="toplist")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(top_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
async def handle_confirm_reset(query, user, chat, context):
    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ callback_data
    chat_id = int(query.data.split('_')[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(context, user.id, chat_id):
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!", show_alert=True)
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    reset_all_stats(chat_id)
    
    await query.edit_message_text(
        "‚ôªÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"profile_{user.id}")]
        ])
    )
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–±—Ä–æ—Å–∞
async def handle_cancel_reset(query):
    await query.edit_message_text(
        "‚úÖ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"profile_{query.from_user.id}")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def handle_admin_reset(query, context):
    user = query.from_user
    chat = query.message.chat
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(context, user.id, chat.id):
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_reset_{chat.id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.edit_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –í–°–Æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –û–±–Ω—É–ª–∏—Ç –≤—Å–µ –∑–≤—ë–∑–¥—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    chat = query.message.chat
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç callback_data
    callback_data = query.data
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º)
    if callback_data == "toplist":
        await handle_toplist(query, user, chat)
        return
    elif callback_data == "admin_reset":
        await handle_admin_reset(query, context)
        return
    elif callback_data.startswith("confirm_reset_"):
        await handle_confirm_reset(query, user, chat, context)
        return
    elif callback_data == "cancel_reset":
        await handle_cancel_reset(query)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback_data
    if not callback_data.endswith(f"_{user.id}"):
        await query.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –º–µ–Ω—é!", show_alert=True)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if callback_data.startswith("profile_"):
        await handle_profile(query, user, chat)
    elif callback_data.startswith("farm_"):
        await handle_farm(query, user, chat)
    elif callback_data.startswith("upgrade_"):
        await handle_upgrade(query, user, chat)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ø–∞ (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º)
async def handle_toplist(query, user, chat):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT username, first_name, stars, level 
    FROM users 
    WHERE chat_id = ? 
    ORDER BY stars DESC 
    LIMIT 10
    ''', (chat.id,))
    
    top_users = cursor.fetchall()
    conn.close()
    
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (username, first_name, stars, level) in enumerate(top_users, 1):
        display_name = f"@{username}" if username else first_name
        top_text += f"{i}. {display_name} - {stars} –∑–≤—ë–∑–¥ (–£—Ä. {level})\n"
    
    keyboard = [
        [InlineKeyboardButton("üåü –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üåæ –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"farm_{user.id}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ø", callback_data="toplist")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(top_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
async def handle_profile(query, user, chat):
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    stars = user_data[4]
    multiplier = user_data[5]
    level = user_data[6]
    last_farm_time = user_data[7]
    upgrade_cost = get_upgrade_cost(level)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞
    if can_farm(last_farm_time):
        farm_status = "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ñ–∞—Ä–º—É!"
    else:
        remaining = get_remaining_time(last_farm_time)
        farm_status = f"‚è∞ –î–æ —Ñ–∞—Ä–º–∞: {remaining}"
    
    keyboard = [
        [InlineKeyboardButton("üåæ –§–∞—Ä–º–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data=f"farm_{user.id}")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="toplist")]
    ]
    
    if stars >= upgrade_cost:
        keyboard.insert(1, [InlineKeyboardButton(f"‚ö°Ô∏è –£–ª—É—á—à–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å ({upgrade_cost} –∑–≤—ë–∑–¥)", callback_data=f"upgrade_{user.id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üåü –ü—Ä–æ—Ñ–∏–ª—å {user.first_name}\n\n"
        f"‚ú® –ó–≤—ë–∑–¥—ã: {stars}\n"
        f"‚ö°Ô∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üíé –°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {upgrade_cost} –∑–≤—ë–∑–¥\n"
        f"‚è∞ {farm_status}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞—Ä–º–∞
async def handle_farm(query, user, chat):
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    last_farm_time = user_data[7]
    
    if not can_farm(last_farm_time):
        remaining = get_remaining_time(last_farm_time)
        await query.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining}!", show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—ë–∑–¥—ã (1-2)
    base_stars = random.randint(MIN_STARS, MAX_STARS)
    multiplier = user_data[5]
    actual_stars = int(base_stars * multiplier)
    new_stars = user_data[4] + actual_stars
    current_time = time.time()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user(user.id, chat.id, stars=new_stars, last_farm_time=current_time)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üåü {user.first_name} –ø–æ–ª—É—á–∏–ª {actual_stars} –∑–≤—ë–∑–¥!\n"
        f"üìä –ë–∞–∑–∞: {base_stars} | –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{multiplier}\n"
        f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_stars} –∑–≤—ë–∑–¥"
    )
    
    keyboard = [
        [InlineKeyboardButton("üåü –ü—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="toplist")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ª—É—á—à–µ–Ω–∏—è
async def handle_upgrade(query, user, chat):
    user_data = get_user(user.id, chat.id, user.username, user.first_name)
    stars = user_data[4]
    level = user_data[6]
    upgrade_cost = get_upgrade_cost(level)
    
    if stars >= upgrade_cost:
        new_stars = stars - upgrade_cost
        new_level = level + 1
        new_multiplier = round(1.0 + (new_level - 1) * 0.1, 1)
        
        update_user(user.id, chat.id, stars=new_stars, level=new_level, multiplier=new_multiplier)
        
        await query.edit_message_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–ª—É—á—à–∏–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ x{new_multiplier}!\n"
            f"üíé –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {upgrade_cost} –∑–≤—ë–∑–¥\n"
            f"‚ú® –û—Å—Ç–∞–ª–æ—Å—å: {new_stars} –∑–≤—ë–∑–¥\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üåü –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_{user.id}")]
            ])
        )
    else:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!", show_alert=True)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("farm", farm))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("toplist", toplist))
    application.add_handler(CommandHandler("reset_stats", reset_stats))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()